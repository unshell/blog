[{"title":"一人一故事 | 太宰治","url":"/blog/2020/10/12/太宰治的故事/","content":"\n<center>![太宰治](/blog/image/taizaizhi/self.jpg)</center>\n<center>图为太宰治，一看就知道是老网抑云患者了</center>\n\n\n\n### 时代背景\n\n出生于帝国时代（明治年间，后经过大正、昭和时代），可以说是经历过第一次世界大战的发生和第二次世界大战结束的男人，在二战过后的几年因病去世。\n\n### 个人经历\n\n- 1909年6月19日出生于**青森县**（日本本州最北部的一个县）的一个地主家庭，家族中子女共11人，他是第10个小孩。\n- 1916年（7岁）就读于本市的金木普通小学，成绩杰出。\n- 1921年（12岁）以第一名的成绩远至明治高等小学就读。\n- 1923年（14岁）3月，**父亲（津岛源右卫门）**去世，享年53岁。4月至县内的青森中学就读并寄宿于远亲丰田家中，中学期间开始创作。\n- 1925年（16岁）发布《最后的太阁》，并与友人合编同人志《星座》。\n- 1927年（18岁）就读于弘前高等学校文科甲组（英语），寄宿于远亲藤田豊三郎家中。期间喜爱**泉镜花**及**芥川龙之介**的作品，年间芥川龙之介自杀，甚受冲击，并在同年秋天与青森艺妓**小山初代**相识。\n- 1929年（20岁）受当时流行的无产阶级文学影响，在同人志《细胞文艺》创办时以`辻岛众二`之名发表作品，受到**井伏鳟二**指导，这时候也有用`小菅银吉`或是本名来写文章。12月因烦恼本身的阶级问题而企图以安眠药自杀未遂。\n- 1930年（21岁）仅因为憧憬法国文学，而在不懂法语的情况下就读于东京帝国大学发文系，住宿在户冢取访町常盘馆，并奉**井伏鳟二**为师。参与非法的左翼运动而怠惰学业，以致最后被开除学籍。在学期间接触，烟酒，酒家女，经常透支家里寄来的生活费。与银座咖啡店侍女`有夫之妇`**部目津子**相识，并同居。于11月相约**部目津子**殉情，本人获救，但目津子死亡。此事是他终身难忘的罪恶意识，心境凝结在《小丑之花》一文中。\n\n<center>![部目津子](/blog/image/taizaizhi/mujinzi.jpg)</center>\n<center>图为殉情者：部目津子</center>\n\n\n- 1931年（22岁）与小山初代同居。\n- 1932年（23岁）因对左翼非法运动绝望，向青森警察局自首。专心于写作之中。\n- 1933年（24岁）在《Sunday东奥》上发表短篇作品《列车》。参加同人志《海豹》发表《鱼服记》。\n- 1935年（26岁）在《文艺》发表《逆行》，成为第一届**芥川赏**的候补作品。3月因求职于东京都新闻社失败，企图上吊自杀。同年拜**佐藤春夫**为师，期间患盲肠炎并发腹膜炎和药物中毒。\n- 1936年（27年）在**井伏鳟二**的劝导下，进入武藏野医院专注于治疗前一年的药物中毒。发行作品集处女作《晚年》，共收入40篇短篇小说。期待已久的第三回芥川奖落选，备受打击。\n- 1937年（28岁）和初恋对象小山初代以服安眠药自杀未遂。并回东京后于初代离别。\n- 1938年（29岁）停笔一年后，以《姨舍》复活，由恩师**井伏鳟二**作媒，和教师**石原美知子**结婚。之后，精神上较安定，写了《富岳百景》等作品。\n- 1939年（30岁）发表《女学生》，获第四届北村透谷文学奖。此外尚有《御伽草纸》，发挥了作家奔放的想象力。\n- 1942年（33岁）母亲去世。\n- 1943年（34岁）与妻子结伴返乡。\n- 1944年（35岁）受**大东亚会议**委托将《大东亚五大宣言》小说化，开始研究鲁迅，去往仙台调查鲁迅的事迹。同年**小山初代**于青岛去世。\n- 1945年（36岁）9月出版以**鲁迅**为模特的小说《惜别》，获得好评不多。为了生活以`黑木舜平`为笔名写了心理悬疑小说《断崖的错觉》，但太宰本身以此作品为耻。\n- 1948年（39岁）再次以《如是我闻》震惊文坛，并着手创作《人间失格》`No Longer Human`。在完成《第二手记》的部分时，肺结核的恶化，身体极度虚弱时长吐血。6月13日和山崎富荣一起投井自尽，39岁生日当天才被发现。死后葬于**三鹰町禅林寺**。\n\n<center>![部目津子](/blog/image/taizaizhi/shanqifurong.jpg)</center>\n<center>图为山崎富荣</center>\n\n\n### 特殊成就\n\n- 自杀狂魔（4次自杀未遂）\n\n- 美女终结者\n\n### 其他时期的照片\n\n<center>![太宰治](/blog/image/taizaizhi/self01.jpg)</center>\n<center>中学时期的太宰治</center>","tags":["一人一故事"]},{"title":"对于感冒的一些记录","url":"/blog/2020/10/09/对于感冒的一些记录/","content":"\n### 奋战了一晚\n\n<center>![现状](/blog/image/virus/现状.jpg)</center>\n\n就在国庆和中秋连放长假期间我感冒了，😞哎∽（还好没有发烧，不然已经被隔离了），所以写点相关的内容记录一下。\n\n### 怎么就感冒了？\n\n#### 1.你着凉了\n\n当然着凉的原因有很多种，比如：晚上踢被子，淋到雨了。\n\n种种原因让你的体温降低了，而`rhinovirus`人鼻病毒正好在低温下更容易繁殖，于是你被转了空子。\n\n#### 2.你被传染了\n\n假如你和流感病毒患者聊天时，他正好打了个喷嚏，飞沫又刚好被你吸入鼻子，而恰好病毒从你的鼻腔偷摸的溜到你的咽喉部位，这个时候一场大战即将开始打响了。\n\n> 当然两种类型是不同的，症状也略有不同。\n\n### 鼻子堵了好难受\n\n鼻子堵了是感冒最难受的现象之一，不对，是唯一😤。\n\n鼻涕水已经流成这样了，竟然还把我鼻子给堵掉，这不是雪上加霜嘛！\n\n我们可以先看下鼻腔的结构，如下图：\n\n<center>![鼻腔状切面解刨图](/blog/image/virus/nasal.jpg)</center>\n\n可以看到鼻腔的中间有三条杠是鼻甲，而中间的空隙就是允许气流通过的部分（事实上空间原本就不是很大）。\n\n> 当鼻腔内的粘膜发炎，充血产生肿胀（让空气流通的通道更加拥挤）以及渗出，就出现了鼻塞和流鼻涕的现象。\n\n其实对于我们来说，由于感冒导致鼻子堵塞时都会有个小技巧让自己舒服点。\n\n#### 1.侧躺\n\n当我们侧着躺着时，侧躺边的鼻子就会通常很多。\n\n结合上面说的原理来说，就是把肿胀的粘膜那边朝上，血液到达不了肿胀的高度，这样侧躺边的鼻子相对就会通畅一些。\n\n#### 2.憋气\n\n当我们堵住鼻子往里鼓气后那一瞬间两个鼻子异常的通畅。\n\n原理跟简单，就是你的大脑在抗争病毒和憋死面前选择不让你憋死。\n\n#### 3.搓尾骨几十秒\n\n这个方法只是听说过，普通人谁会想到搓屁股后的骨头会缓解鼻塞呢？\n\n### 感冒药不治感冒\n\n当听到感冒药不治感冒时其实我是不能接受的。\n\n但实际上感冒能治愈都是因为我们自己本身的免疫系统，而感冒药只是用来控制感冒症状（鼻塞，头疼，发热）的。\n\n### 治疗感冒的主力：免疫系统\n\n其实从刚开始病毒进入时，免疫系统就开始起作用了。\n\n1. 鼻腔的绒毛就是第一道防线，捕获吸进的所有异物，通过打喷嚏和流鼻涕把异物排除。\n2. 当然总有漏网之鱼，它们突破了第一道防线进入了咽喉。因为细胞是通关蛋白质相互沟通的，所以它假扮成蛋白质诱骗细胞导致感染。而感染的细胞开始复制病毒，最新的病毒被复制，开始诱骗更多的细胞，以此往复。\n3. 由于被感染的细胞越来越多，以至于被**巡逻兵（中性粒细胞）**发现了。它们带着更多的人手杀死病毒和被感染的细胞，但是战争就是残酷的，双方都有伤亡。\n4. 当第一战打完后，**清洁车（巨噬细胞）**就开始清理战场了，事实上它的动作是很粗鲁的，以至于我们感觉到喉咙痛也是因为它们所导致的。而后巨噬细胞释放**白细胞介素**，这种化学信号会导致你感到疼痛乏力，提醒你生病了。更主要是调节你脑壳里的**恒温器（体温调节中枢，维持37°度的神器）**，那病毒跟我们一样在天气热的时候工作效率会变低。\n5. 值得庆幸的是我们有**情报员（树突状细胞）**收集病毒碎片信息，当收集到足够的信息后送往**军备库（淋巴腺）**，得到信息的军备库马上开始配备对付病毒的**T细胞**和**B细胞**，并前往战场精准的消灭病毒和感染细胞及抑制新病毒再次感染细胞。\n6. 通过咳嗽以及其他办法排出残骸后，病毒彻底被消灭后。\n\n当新的咽喉细胞重新生长，你的感冒就痊愈了。\n\n### 🦠病毒（virus）\n\n一种只含**DNA**或**RNA**的遗传因子，因为颗粒极小能通过细菌滤器，又称**滤过性病毒**。\n\n流感病毒就属于RNA病毒，和最近爆发**疫情（冠状病毒）**一样也是RNA病毒，大致长这样：\n\n<center>![RNA病毒](/blog/image/virus/RNA_Virus.jpg)</center>\n\n> 工作流就是一系列RNA的转录，复制，最后组装成熟而释放出来，再继续感染其他细胞\n\n内容就到这里了，你只要知道让你感冒的玩意很下饭就行了🙂。\n\n### 声明\n\n本文内容对于学术知识来说无任何参考价值，只是本人一时兴起做的记录。\n\n","tags":["常识"]},{"title":"一人一故事 | 周树人","url":"/blog/2020/09/28/周树人的故事/","content":"\n<center>![周树人](/blog/image/shuren/zhoushuren.jpg)</center>\n\n\n### 时间跨度\n\n- 光绪 七年 - 三十四年（1881 - 1908）\n- 宣统 元年 - 二年（1909 - 1910）\n- 民国 元年 - 二十五年（1912 - 1936）\n\n> 1881年9月25日出生于**浙江绍兴城内东昌坊新台门**周家，逝世于1936年10月19日上午。\n\n### 经历\n\n- 1881年出生\n- 1892年（11岁）去三味书屋跟着**寿镜吾先生**读书，课余时间画画，结交**闰土（章闰水）**为好友。\n- 1893年（12岁）祖父因事下狱，**父亲（周伯宜）**重病，家道中落。\n- 1896年（15岁）父亲去世，开始写日记。\n- 1897年（16岁）分房，因拒绝签字遭叔辈斥责。\n- 1898年（17岁）去南京水师学堂求学，改名为**周树人**。同年参加过县考并入选（拒绝府考）。\n- 1899年（18岁）转入江南铁路学堂，学开矿。接触赫胥黎的《天演论》，爱骑马赛马。\n- 1902年（22岁）毕业，同年3月去日本留学。同年4月报读日语速成班。\n- 1903年（23岁）剪辫，开始关注人性及国民性问题。\n- 1904年（24岁）速成班毕业，68岁的祖父去世。求学于仙台医学专门学院（现日本东北大学）。相识**藤野严九郎**。\n- 1906年（26岁）决定弃医从文，被骗回国与**朱安**结婚，后又回东京不在读书并从事文艺译著工作，之后几年通过不同方式学习了德语和俄语。\n- 1908年（28岁）跟**章太炎先生**学习，成为光复会会员，生活艰难，与**二弟（周作人）**翻译《域外小说集》，已校对书稿补贴生活。\n- 1909年（29岁）《域外小说集》二册出版，同年8月回国，担任杭州、浙江两级师范学堂教员。\n- 1910年（30岁）担任绍兴中学堂教员兼监学。\n- 1911年（31岁）个人文言小说《怀旧》。\n- 1912年（32岁）担任教育部社会教育司第一科科长，同年8月担任教育部佥事。\n- 1917年（37岁）7月7日离职，14日又复职。\n- 1918年（38岁）1月参加《新青年》改组，担任编委。同年5月，用**鲁迅**为笔名，发表中国现代文学史上第一篇用现代体式创作的白话短片小说《狂人日记》。\n- 1920年（40岁）在北京大学讲授中国小说史，同年9月发表小说《风波》。\n- 1923年（43岁）《呐喊》出版。与弟弟分居。\n- 1924年（44岁）成为《语丝》作家群的主将之一。\n- 1925年（45岁）支持进步学生正义斗争被教育局总长罢去佥事职务，后向平政院状告教育局总长。\n- 1926年（46年）3月，**三一八惨案**，4月写出《死地》《纪念刘和珍君》，遭追捕，避难到山本医院。同年8月《彷徨》出版。\n- 1927年（47岁）四一二反革命政变，29日营救进步学生失败。同年9月拒绝作为诺贝尔文学奖候选人。同年12月与**梁秋实**吵架。\n- 1928年（48岁）参加中国革命互济会，收集马克思主义著作并翻译。提倡革命没数，现代木刻运动。\n- 1929年（49岁）**许广平**生子，取名**周海婴**。商议建立**中国左翼作家联盟**。\n- 1930年（50岁）联盟成立。\n- 1931年（51岁）**柔石**（联盟成员之一）被逮，离开避难。\n- 1932年（52岁）战事发生，避难遇**艾青**等人。\n- 1933年（53岁）作《为了忘却的纪念》怀念**柔石**。\n- 1934年（54岁）《北平笺谱》出版。\n- 1935年（55岁）译书《死魂灵》。\n- 1936年（56岁）1月《故事新编》出版，10月19日上午5时25分逝世。\n\n### 小说集与分篇\n\n- 呐喊\n  - 狂人日记\n  - 孔乙己\n  - 药\n  - 明天\n  - 一件小事\n  - 头发的故事\n  - 风波\n  - 故乡\n  - 阿Q正传\n  - 端午节\n  - 白光\n  - 兔和猫\n  - 鸭的喜剧\n  - 社戏\n- 彷徨\n  - 祝福\n  - 在酒楼上\n  - 幸福的家庭\n  - 肥皂\n  - 长明灯\n  - 示众\n  - 高老夫子\n  - 孤独者\n  - 伤逝\n  - 弟兄\n  - 离婚\n- 故事新编\n\n### 美术设计作品\n\n<center>![猫头鹰](/blog/image/shuren/maotouying.jpg)</center>\n<center>图为：猫头鹰</center>\n<center>![猫头鹰](/blog/image/shuren/maotouying2.jpg)</center>\n<center>图为：猫头鹰</center>\n<center>![校徽](/blog/image/shuren/xiaohui.jpg)</center>\n<center>图为：校徽</center>\n<center>![国徽](/blog/image/shuren/guohui.jpg)</center>\n<center>图为：国徽</center>\n\n\n### 照片\n\n<center>![鲁迅本人](/blog/image/shuren/zhoushuren01.jpg)</center>\n<center>1928年3月22日摄于景云里寓中</center>\n<center>![全家福](/blog/image/shuren/all.jpg)</center>\n<center>1931年4月20日，**鲁迅**全家与**冯雪峰**全家摄于上海。**鲁迅**抱着**周海婴**，身后是**许广平**。</center>\n<center>![鲁迅笑](/blog/image/shuren/zhoushuren02.jpg)</center>\n<center>沙飞摄于1936年10月8日，**鲁迅**生平不苟言笑，这是**鲁迅**照片中唯一大笑的镜头</center>","tags":["一人一故事"]},{"title":"CentOs 安装 Redis","url":"/blog/2020/06/12/CentOs安装Redis/","content":"\n## 安装环境\n\n系统：CentOS Linux release 8.1.1911 (Core) | Redis版本：6.0.5 | 博客记录时间：2020-6-12 17:15:04\n\n### 下载最新稳定版\n\n```\n# 下载当前最新版\nwget http://download.redis.io/releases/redis-6.0.5.tar.gz\n# 解压\ntar -zxvf redis-6.0.5.tar.gz\n# 进入到解压后的文件夹\ncd redis-6.0.5\n```\n\n### 安装 Redis\n\n```shell\n# 编译前先确保安装了gcc和make\nyum install -y gcc make\n# 编译(当前位置在redis-6.0.5中)\nmake\n# 编译结果如下：\n\t一堆的CC编译\n    LINK redis-server\n    INSTALL redis-sentinel\n    LINK redis-cli\n    LINK redis-benchmark\n    INSTALL redis-check-rdb\n    INSTALL redis-check-aof\n\nHint: It's a good idea to run 'make test' ;)\n# 进入到src目录\ncd src\n# 安装\nmake install\n# 输出内容如下：\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n# 运行redis-server\nredis-server\n# 输出内容如下说明，安装成功：\n7303:C 12 Jun 2020 17:59:37.751 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n7303:C 12 Jun 2020 17:59:37.751 # Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=7303, just started\n7303:C 12 Jun 2020 17:59:37.751 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf\n7303:M 12 Jun 2020 17:59:37.751 * Increased maximum number of open files to 10032 (it was originally set to 1024).\n                _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 6.0.5 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 7303\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |                                  \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                       \n          `-._        _.-'                                           \n              `-.__.-'                                               \n\n7303:M 12 Jun 2020 17:59:37.752 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\n7303:M 12 Jun 2020 17:59:37.752 # Server initialized\n7303:M 12 Jun 2020 17:59:37.752 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n7303:M 12 Jun 2020 17:59:37.752 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.\n7303:M 12 Jun 2020 17:59:37.752 * Loading RDB produced by version 6.0.5\n7303:M 12 Jun 2020 17:59:37.752 * RDB age 885 seconds\n7303:M 12 Jun 2020 17:59:37.752 * RDB memory usage when created 0.77 Mb\n7303:M 12 Jun 2020 17:59:37.752 * DB loaded from disk: 0.000 seconds\n7303:M 12 Jun 2020 17:59:37.752 * Ready to accept connections\n```\n\n### 配置 Redis\n\n在初次接触前我们尤其要注意三个文件：\n\n- redis-6.0.5\n  - redis.conf  `(配置文件)`\n  - src\n    - redis-server `(Redis 服务)`\n    - redis-cli `(Redis 客户端)`\n\n```shell\n# 用 vim 打开 redis-cli\nvim redis-cli\n# 开启守护进程：\n# By default Redis does not run as a daemon. Use 'yes' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\ndaemonize yes\n# 允许任何网络接口连接\nbind 127.0.0.1 修改为 bind 0.0.0.0\n# 连接密码授权\n# IMPORTANT NOTE: starting with Redis 6 \"requirepass\" is just a compatiblity\n# layer on top of the new ACL system. The option effect will be just setting\n# the password for the default user. Clients will still authenticate using\n# AUTH <password> as usually, or more explicitly with AUTH default <password>\n# if they follow the new protocol: both will work.\n#\nrequirepass [你的密码]\n# 当然除了在配置中设置密码，你还可以在客户端设置密码\nconfig set requirepass [你的密码]\n# 其他的一些配置,如修改默认端口(6379)\n# Accept connections on the specified port, default is 6379 (IANA #815344).\n# If port 0 is specified Redis will not listen on a TCP socket.\nport 6379\n```\n\n### 运行 Redis 服务\n\n```shell\n# 配置相应的配置之后(包括开启守护进程),通过配置运行服务\nredis-server ../redis.conf\n```\n\n### 相关文档\n\n- [Redis Archived Versions](http://download.redis.io/releases/)","tags":["redis"]},{"title":"Tomcat 部署项目时遇到的问题","url":"/blog/2020/04/23/Tomcat部署项目时遇到的问题/","content":"\n### 1.Unable to add the resource\n>org.apache.catalina.webresources.Cache.getResource Unable to add the resource\n\n**原因：**资源缓存空间不足，得配置更大的资源缓存空间\n\n**解决方法：**修改 Tomcat 文件夹下 conf 文件中的 context.xml 文件，添加内容如下：\n\n```xml\n<Context>\n\t<Resources cachingAllowed=\"true\" cacheMaxSize=\"150000\" ></Resources>\n</Context>\n```\n\n### 2.naming.namingContextCreationFailed\n>org.apache.catalina.core.NamingContextListener.lifecycleEvent naming.namingContextCreationFailed\n\n**原因**：命名监听器创建失败\n\n### 3.至少有一个JAR被扫描用于TLD但尚未包含TLD。\n>org.apache.jasper.servlet.TldScanner.scanJars 至少有一个JAR被扫描用于TLD但尚未包含TLD。 为此记录器启用调试日志记录，以获取已扫描但未在其中找到TLD的完整JAR列表。 在扫描期间跳过不需要的JAR可以缩短启动时间和JSP编译时间。\n\n**等级：**警告\n\n**解决方法:**\n\n**1.修改 Tomcat 文件夹下 conf 文件夹中 logging.properties 文件**\n\n```properties\n# 输出被扫描TLD的Jar包的列表\norg.apache.jasper.servlet.TldScanner.level = FINE\n```\n\n**2.重新运行 Tomcat ，日志输出扫描的Jar包**\n\n**3.修改 Tomcat 文件夹下 conf 文件夹中 catalina.properties 文件**\n\n```properties\n# Default list of JAR files that should not be scanned using the JarScanner\n# functionality. This is typically used to scan JARs for configuration\n# information. JARs that do not contain such information may be excluded from\n# the scan to speed up the scanning process. This is the default list. JARs on\n# this list are excluded from all scans. The list must be a comma separated list\n# of JAR file names.\n# The list of JARs to skip may be over-ridden at a Context level for individual\n# scan types by configuring a JarScanner with a nested JarScanFilter.\n# The JARs listed below include:\n# - Tomcat Bootstrap JARs\n# - Tomcat API JARs\n# - Catalina JARs\n# - Jasper JARs\n# - Tomcat JARs\n# - Common non-Tomcat JARs\n# - Test JARs (JUnit, Cobertura and dependencies)\ntomcat.util.scan.StandardJarScanFilter.jarsToSkip=\\\nannotations-api.jar,\\ant-junit*.jar,\\ant-launcher.jar,\\\nant.jar,\\asm-*.jar,\\aspectj*.jar,\\bootstrap.jar,\\catalina-ant.jar,\\catalina-ha.jar,\\\ncatalina-ssi.jar,\\catalina-storeconfig.jar,\\catalina-tribes.jar,\\catalina.jar,\\cglib-*.jar,\\\ncobertura-*.jar,\\commons-beanutils*.jar,\\commons-codec*.jar,\\commons-collections*.jar,\\\ncommons-daemon.jar,\\commons-dbcp*.jar,\\commons-digester*.jar,\\\ncommons-fileupload*.jar,\\commons-httpclient*.jar,\\commons-io*.jar,\\commons-lang*.jar,\\\ncommons-logging*.jar,\\commons-math*.jar,\\commons-pool*.jar,\\dom4j-*.jar,\\easymock-*.jar,\\\necj-*.jar,\\el-api.jar,\\geronimo-spec-jaxrpc*.jar,\\h2*.jar,\\hamcrest-*.jar,\\hibernate*.jar,\\\nhttpclient*.jar,\\icu4j-*.jar,\\jasper-el.jar,\\jasper.jar,\\jaspic-api.jar,\\jaxb-*.jar,\\\njaxen-*.jar,\\jdom-*.jar,\\jetty-*.jar,\\jmx-tools.jar,\\jmx.jar,\\jsp-api.jar,\\jstl.jar,\\\njta*.jar,\\junit-*.jar,\\junit.jar,\\log4j*.jar,\\mail*.jar,\\objenesis-*.jar,\\oraclepki.jar,\\\noro-*.jar,\\servlet-api-*.jar,\\servlet-api.jar,\\slf4j*.jar,\\taglibs-standard-spec-*.jar,\\\ntagsoup-*.jar,\\tomcat-api.jar,\\tomcat-coyote.jar,\\tomcat-dbcp.jar,\\tomcat-i18n-*.jar,\\\ntomcat-jdbc.jar,\\tomcat-jni.jar,\\tomcat-juli-adapters.jar,\\tomcat-juli.jar,\\tomcat-util-scan.jar,\\\ntomcat-util.jar,\\tomcat-websocket.jar,\\tools.jar,\\websocket-api.jar,\\wsdl4j*.jar,\\xercesImpl.jar,\\\nxml-apis.jar,\\xmlParserAPIs-*.jar,\\xmlParserAPIs.jar,\\xom-*.jar\n# 将要跳过扫描的包在后面添加\n# 例子：mysql-connector-*.jar,\\\n# 注意以 ,\\ 分隔\n```","tags":["bug"]},{"title":"Tomcat 服务","url":"/blog/2020/04/23/Tomcat服务/","content":"\n### 环境\n\n运行环境：Windows 10 | Apache Tomcat 9.0.34 | 博客记录时间：2020-4-23 17:16:12\n\n通常我们 打开 / 关闭 Tomcat 服务时都会执行bin目录下的 startup.bat / shutdown.bat 文件。\n\n但是细心的小伙伴就会发现(╮(￣▽￣)╭)，`startup.bat` 和 `shutdown.bat` 文件中都有这么一句话。\n\n```bash\nrem ---------------------------------------------------------------------------\nrem Start / Stop script for the CATALINA Server\nrem ---------------------------------------------------------------------------\ncall \"%EXECUTABLE%\" start / stop %CMD_LINE_ARGS%\n```\n\n所以不论是 startup 还是 shutdown 都是执行了 `catalina.bat`，只是执行的指令不同。\n\n### catalina.bat\n\n首选我们分析下 `catalina.bat` 脚本的内容：\n\n```bash\nrem Guess CATALINA_HOME if not defined\nset \"CURRENT_DIR=%cd%\"\nif not \"%CATALINA_HOME%\" == \"\" goto gotHome\nset \"CATALINA_HOME=%CURRENT_DIR%\"\nif exist \"%CATALINA_HOME%\\bin\\catalina.bat\" goto okHome\ncd ..\nset \"CATALINA_HOME=%cd%\"\ncd \"%CURRENT_DIR%\"\n```\n\n检验 CATALINA_HOME 环境变量，如果不正确则重新设置。\n\n```bash\nset CLASSPATH=\n\nrem Get standard environment variables\nif not exist \"%CATALINA_BASE%\\bin\\setenv.bat\" goto checkSetenvHome\ncall \"%CATALINA_BASE%\\bin\\setenv.bat\"\ngoto setenvDone\n:checkSetenvHome\nif exist \"%CATALINA_HOME%\\bin\\setenv.bat\" call \"%CATALINA_HOME%\\bin\\setenv.bat\"\n:setenvDone\n\nrem Get standard Java environment variables\nif exist \"%CATALINA_HOME%\\bin\\setclasspath.bat\" goto okSetclasspath\necho Cannot find \"%CATALINA_HOME%\\bin\\setclasspath.bat\"\necho This file is needed to run this program\ngoto end\n:okSetclasspath\ncall \"%CATALINA_HOME%\\bin\\setclasspath.bat\" %1\nif errorlevel 1 goto end\n```\n\n设置环境变量：\n\n- 在 CATALINA_BASE 和 CATALINA_BASE 寻找`setenv.bat`文件并执行，找不到则不执行。\n- 寻找`setclasspath.bat`(设置 Java 相关的环境变量)文件并执行，找不到则结束。\n\n```bash\nrem Add tomcat-juli.jar to classpath\nrem tomcat-juli.jar can be over-ridden per instance\nif not exist \"%CATALINA_BASE%\\bin\\tomcat-juli.jar\" goto juliClasspathHome\nset \"CLASSPATH=%CLASSPATH%;%CATALINA_BASE%\\bin\\tomcat-juli.jar\"\ngoto juliClasspathDone\n:juliClasspathHome\nset \"CLASSPATH=%CLASSPATH%;%CATALINA_HOME%\\bin\\tomcat-juli.jar\"\n:juliClasspathDone\n\nif not \"%JSSE_OPTS%\" == \"\" goto gotJsseOpts\nset \"JSSE_OPTS=-Djdk.tls.ephemeralDHKeySize=2048\"\n:gotJsseOpts\nset \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS%\"\n\nrem Register custom URL handlers\nrem Do this here so custom URL handles (specifically 'war:...') can be used in the security policy\nset \"JAVA_OPTS=%JAVA_OPTS% -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\"\n\nif not \"%LOGGING_CONFIG%\" == \"\" goto noJuliConfig\nset LOGGING_CONFIG=-Dnop\nif not exist \"%CATALINA_BASE%\\conf\\logging.properties\" goto noJuliConfig\nset LOGGING_CONFIG=-Djava.util.logging.config.file=\"%CATALINA_BASE%\\conf\\logging.properties\"\n:noJuliConfig\n\nif not \"%LOGGING_MANAGER%\" == \"\" goto noJuliManager\nset LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n:noJuliManager\n```\n\ntomcat-juli.jar：\n\n- 将 **tomcat-juli.jar** 添加到 classPath 环境变量中。\n- 将日志的配置文件路径添加到 LOGGING_CONFIG 环境变量中。\n\n> Apache Tomcat由一个自己的实现了 java.util.logging 多个关键元素的实现。这个实现被称为 JULI 。实现的核心组件是定制化的 LogManager ，可以获取运行在Tomcat中的不同web应用(以及不同的class loader)。他支持为应用配置单独的日志配置。当有web应用从内在中是被卸载时，会接到Tomcat的通知，以便他所引用的类可以被清除，避免内存泄露。\n\n```bash\nrem Execute The Requested Command\necho Using CATALINA_BASE:   \"%CATALINA_BASE%\"\necho Using CATALINA_HOME:   \"%CATALINA_HOME%\"\necho Using CATALINA_TMPDIR: \"%CATALINA_TMPDIR%\"\nif \"\"%1\"\" == \"\"debug\"\" goto use_jdk\necho Using JRE_HOME:        \"%JRE_HOME%\"\ngoto java_dir_displayed\n:use_jdk\necho Using JAVA_HOME:       \"%JAVA_HOME%\"\n:java_dir_displayed\necho Using CLASSPATH:       \"%CLASSPATH%\"\n\nset _EXECJAVA=%_RUNJAVA%\nset MAINCLASS=org.apache.catalina.startup.Bootstrap\nset ACTION=start\nset SECURITY_POLICY_FILE=\nset DEBUG_OPTS=\nset JPDA=\n\nif not \"\"%1\"\" == \"\"jpda\"\" goto noJpda\nset JPDA=jpda\nif not \"%JPDA_TRANSPORT%\" == \"\" goto gotJpdaTransport\nset JPDA_TRANSPORT=dt_socket\n:gotJpdaTransport\nif not \"%JPDA_ADDRESS%\" == \"\" goto gotJpdaAddress\nset JPDA_ADDRESS=localhost:8000\n:gotJpdaAddress\nif not \"%JPDA_SUSPEND%\" == \"\" goto gotJpdaSuspend\nset JPDA_SUSPEND=n\n:gotJpdaSuspend\nif not \"%JPDA_OPTS%\" == \"\" goto gotJpdaOpts\nset JPDA_OPTS=-agentlib:jdwp=transport=%JPDA_TRANSPORT%,address=%JPDA_ADDRESS%,server=y,suspend=%JPDA_SUSPEND%\n:gotJpdaOpts\nshift\n:noJpda\n```\n\n- 设置启动类 - org.apache.catalina.startup.Bootstrap\n- 设置远程调试相关参数 - JPDA\n\n```bash\nif \"\"%1\"\" == \"\"debug\"\" goto doDebug\nif \"\"%1\"\" == \"\"run\"\" goto doRun\nif \"\"%1\"\" == \"\"start\"\" goto doStart\nif \"\"%1\"\" == \"\"stop\"\" goto doStop\nif \"\"%1\"\" == \"\"configtest\"\" goto doConfigTest\nif \"\"%1\"\" == \"\"version\"\" goto doVersion\n\necho Usage:  catalina ( commands ... )\necho commands:\necho   debug             Start Catalina in a debugger\necho   debug -security   Debug Catalina with a security manager\necho   jpda start        Start Catalina under JPDA debugger\necho   run               Start Catalina in the current window\necho   run -security     Start in the current window with security manager\necho   start             Start Catalina in a separate window\necho   start -security   Start in a separate window with security manager\necho   stop              Stop Catalina\necho   configtest        Run a basic syntax check on server.xml\necho   version           What version of tomcat are you running?\ngoto end\n```\n\n这里值得注意的且常用的(start / stop)，正如开头提到的。\n\n### org.apache.catalina\n\n解压 bin 目录中的 catalina.jar 后我们能找到 org.apache.catalina.startup.Bootstrap 也就是 catalina.bat 里设置的启动类(MAINCLASS)\n\n```java\npackage org.apache.catalina.startup;\npublic final class Bootstrap {\n    public static void main(String[] args) {\n        // --- 略 ---\n        String command = \"start\";\n        if (args.length > 0) {\n            command = args[args.length - 1];\n        }\n        if (command.equals(\"start\")) {\n            daemon.setAwait(true);\n            daemon.load(args);\n            daemon.start();\n            if (null == daemon.getServer()) {\n                System.exit(1);\n            } else if (command.equals(\"stop\")) {\n                daemon.stopServer(args);\n            }\n        }\n        // --- 略 ---\n    }\n}\n```\n\n当指令等于`start`时运行 Catalina.class 中的 `start()`方法：\n\n```java\npackage org.apache.catalina.startup;\n\npublic class Catalina {\n    public void start() {\n        // --- 略 ---\n        if (this.await) {\n            this.await();\n            this.stop();\n        }\n    }\n}\n```\n\n在`start()`方法中调用了`await()`和`stop()`两个方法：\n\n- `await()` 方法监听停止服务请求的方法\n\n- `stop()` 方法是停止服务的方法\n\n> `await()` 方法是阻塞方法，只有客户端请求关闭Tomcat服务时，他才会执行`stop()`方法，否则一直等待关闭请求。\n\nStandardServer.class 中的 `await()` 方法：\n\n```java\npackage org.apache.catalina.core;\n\npublic final class StandardServer extends LifecycleMBeanBase implements Server {\n    private volatile ServerSocket awaitSocket = null;\n    private String shutdown = \"SHUTDOWN\";\n    \n    public void await() {\n        /* 略 */\n        try {\n            this.awaitSocket = new ServerSocket(this.getPortWithOffset(), 1,InetAddress.getByName(this.address));\n        } catch (IOException var67) {\n            log.error(sm.getString(\"standardServer.awaitSocket.fail\", new Object[]{this.address,String.valueOf(this.getPortWithOffset()), String.valueOf(this.getPort()),String.valueOf(this.getPortOffset())}), var67);\n            return;\n        }\n        ServerSocket serverSocket;\n        try {\n            /* 略 */\n             while(true) {\n                 label611: {\n                     label610: {\n                         try {\n                             label634: {\n                                 try {\n                                     // 执行accept等待请求\n                                     socket = serverSocket.accept();\n                                     socket.setSoTimeout(10000);\n                                     stream = socket.getInputStream();\n                                 } catch (SocketTimeoutException var69) {\n                                     log.warn(sm.getString(\"standardServer.accept.timeout\", new Object[]{System.currentTimeMillis() - acceptStartTime}), var69);\n                                     continue;\n                                 }\n                                 /* 略 */\n                             }\n                         }\n                     }\n                 }\n                 /* 略 */\n                 boolean match = command.toString().equals(this.shutdown);\n                 // 如果请求内容与 shutdown 字段相同则跳出循环，Socket 服务停止\n                 if (match) {\n                     log.info(sm.getString(\"standardServer.shutdownViaPort\"));\n                     var32 = false;\n                     break;\n                 }\n                 log.warn(sm.getString(\"standardServer.invalidShutdownCommand\", new Object[]{command.toString()}));\n             }\n        }\n        /* 略 */\n    }\n}\n```\n\n可以看到这里开启了一个 ServerSocket ，调用 accept() 方法监听请求。\n\n`serverSocket.close()`之后 `start()`方法中的`this.stop()`执行，Server 被关闭。\n\n当指令等于`stop`时运行 Catalina.class 中的 `stopServer()`方法：\n\n```java\npublic void stopServer(String[] arguments) {\n    if (arguments != null) {\n        this.arguments(arguments);\n    }\n    Server s = this.getServer();\n    if (s == null) {\n        /* 略 */\n    } else {\n        try {\n            s.stop();\n            s.destroy();\n        } catch (LifecycleException var63) {\n            log.error(sm.getString(\"catalina.stopError\"), var63);\n        }\n    }\n}\n```\n\n显而易见，Server 不为 null 时，停止并且销毁。\n\n### Server 中的 shutdown 属性\n\n```bash\n<Server port=\"8085\" shutdown=\"SHUTDOWN\">\n```\n\n这里`shutdown`的默认属性就是`SHUTDOWN`，与 StandardServer 类中 shutdown 属性的值一样。\n\n> 当然 StandardServer 类中 shutdown 属性提供了 setShutdown(String shutdown) 方法。\n\n做个测试，我们执行 startup.bat 先启动 Tomcat ，跳出窗口并打印日志：\n\n```bash\n┌────────────────────────────────────────────────────────┐\n│Tomcat\n├────────────────────────────────────────────────────────┤\n│Server.服务器版本:Apache Tomcat/9.0.34\n│服务器构建:Apr 3 2020 2020 12:02:52 UTC\n│服务器版本号(:9.0.34.0\n│# 略\n│Server startup in [673] milliseconds\n└────────────────────────────────────────────────────────┘\n```\n\n我们再启动另一个窗口，进入`telnet`：\n\n```\n┌────────────────────────────────────────────────────────┐\n│Command Prompt\n├────────────────────────────────────────────────────────┤\n│Microsoft Windows [版本 10.0.17763.1039]\n│(c) 2018 Microsoft Corporation。保留所有权利。\n│C:\\Users\\Administrator>telnet localhost 8005\n│正在连接localhost...\n└────────────────────────────────────────────────────────┘\n```\n\n之后我们再像8005端口发送点东西\n\n```\n┌────────────────────────────────────────────────────────┐\n│Telnet localhost\n├────────────────────────────────────────────────────────┤\n│unshell\n└────────────────────────────────────────────────────────┘\n```\n\n发送`unshell`字符串，Tomcat窗口打印出新的内容\n\n```\n┌────────────────────────────────────────────────────────┐\n│Tomcat\n├────────────────────────────────────────────────────────┤\n│Server.服务器版本:Apache Tomcat/9.0.34\n│服务器构建:Apr 3 2020 2020 12:02:52 UTC\n│服务器版本号(:9.0.34.0\n│# 略\n│Server startup in [673] milliseconds\n│Invalid shutdown command [unshell] received\n└────────────────────────────────────────────────────────┘\n```\n\n如果内容没有更新可以尝试按`enter`键\n\n```verilog\n# 完整内容如下(可以看到警告的方法，就如我们之前所说的那样)\n23-Apr-2020 16:57:20.166 警告 [main] org.apache.catalina.core.StandardServer.await Invalid shutdown command [unshell] received\n```\n\n所以当我们输入指令为`SHUTDOWN`时，Tomcat 就关闭了。\n\n当然这个指令默认监听`localhost`的关闭请求，如果要支持远程关闭的话，可以添加参数 address，例子如下：\n\n```bash\n<Server port=\"8085\" shutdown=\"SHUTDOWN\" address=\"36.152.44.95\">\n```\n\n具体版本是否支持该参数，运行 Tomcat ，文档在 `http://localhost:8080/docs/config/server.html`中有说明。\n\n这里以版本9为例\n\nAll implementations of **Server** support the following attributes：\n\n| Attribute | Description                                                  |\n| --------- | ------------------------------------------------------------ |\n| port      | The TCP/IP port number on which this server waits for a shutdown command. Set to `-1` to disable the shutdown port. |\n| shutdown  | The command string that must be received via a TCP/IP connection to the specified port number, in order to shut down Tomcat. |\n| address   | The TCP/IP address on which this server waits for a shutdown command. If no address is specified, `localhost` is used. |\n\n> 以上就是所有内容，本文只是在理解 Tomcat 时，碰巧看到的一些边缘内容，作为记录保存下来。\n\n### 引文\n\n- [Tomcat catalina.bat 原理解析](https://www.jianshu.com/p/b2f63ffa964c)\n\n- [Tomcat 怎么停止服务的?](https://cloud.tencent.com/developer/article/1129737)","tags":["tomcat"]},{"title":"快速使用 Tomcat","url":"/blog/2020/04/23/快速使用Tomcat/","content":"\n## 环境\n\n运行环境：Windows 10 | Apache Tomcat 9.0.34 | Java 1.8.0 | 博客记录时间：2020-4-23 08:59:27\n\n### 下载 Tomcat\n\n首先进入到 [Tomcat官网](http://tomcat.apache.org/) ，这里我们以 [版本9](https://tomcat.apache.org/download-90.cgi) 进行举例 (目前最新版本为10)。\n\n### 9.0.34\n\n#### Binary Distributions\n\n- Core:\n  - [zip](https://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.zip) ([pgp](https://downloads.apache.org/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.zip.asc), [sha512](https://downloads.apache.org/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.zip.sha512))\n\n这里我们直接点击 zip 下载，下载完之后文件目录如下：\n\n- apache-tomcat-9.0.34\n  - bin - 运行文件，Windows环境下的.bat和Linux环境下的.sh\n  - conf - 常用到的一些配置文件\n  - lib - 一些 Java 的 Jar 包\n  - logs - 日志\n  - temp - 临时文件\n  - webapps - 默认虚拟主机的默认项目根目录\n  - work - 项目部署后的缓存文件目录\n\n除了以前的文件夹外还有一些文件，如 README.md 文件\n\n> 官网：Please see the README file for packaging information. It explains what every distribution contains. \n\n### 运行 Tomcat\n\n我们可以看到 webapps 目录下有5个初始项目：\n\n- webapps\n  - docs\n  - examples\n  - host-manager\n  - manager\n  - ROOT\n\n> Tomcat 中 bin 和 lib 文件中的 Jar 包说明了需要在 Java 环境下运行\n\n然后我们运行 bin 目录下的 startup.bat 文件，如果出现终端窗口一直在打印日志说明运行成功：\n\n```bash\n┌────────────────────────────────────────────────────────┐\n│Command Prompt\n├────────────────────────────────────────────────────────┤\n│Server.服务器版本:Apache Tomcat/9.0.34\n│服务器构建:Apr 3 2020 2020 12:02:52 UTC\n│服务器版本号(:9.0.34.0\n│OS Name:Windows 10\n│OS.版本:10.0\n│架构:amd64\n│Java 环境变量: C:\\Program Files\\Java\\jdk1.8.0_251\\jre\n│JVM 版本:1.8.0_251-b08\n│JVM.供应商:Oracle Corporation\n│--- 略 ---\n└────────────────────────────────────────────────────────┘\n```\n\n打印的内容大致如上，这时候使用浏览器访问 `localhost:8080`，就能看到 Tomcat 的如下页面：\n\n![webapps 目录下的 ROOT 项目](/blog/image/tomcat/01.png)\n\n> 值得注意的是 work 目录中生成了对应项目的文件夹，但内容为空。以及 logs 文件中生成的日志文件，如 catalina.*.log 中的内容就是终端窗口打印的内容。\n\n### 日志输出乱码问题\n\n当窗口运行时输出的日志出现乱码，如`淇℃伅`之类的内容说明当前系统的默认字符与 conf 文件夹中 logging.properties 文件中 encoding 属性设置不相同(默认配置为UTF-8)。\n\n#### 解决方法\n\n```bash\n┌────────────────────────────────────────────────────────┐\n│Command Prompt\n├────────────────────────────────────────────────────────┤\n│Microsoft Windows [版本 10.0.17763.1039]\n│(c) 2018 Microsoft Corporation。保留所有权利。\n│C:\\Users\\Administrator>chcp\n│活动代码页: 936\n└────────────────────────────────────────────────────────┘\n```\n\n获取当前系统活动代码页，找到对应编码，如下表：\n\n| 活动代码页 | 编码          |\n| ---------- | ------------- |\n| 936        | 简体中文(GBK) |\n| 65001      | UTF-8Unicode  |\n\n然后修改 logging.properties 中 encoding = GBK，如下：\n\n```properties\n############################################################\n# Handler specific properties.\n# Describes specific configuration info for Handlers.\n############################################################\n1catalina.org.apache.juli.AsyncFileHandler.level = FINE\n1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs\n1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.\n1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90\n1catalina.org.apache.juli.AsyncFileHandler.encoding = GBK\n```\n\n### 发布项目\n\n#### 1.添加 war 包到 webapps 中\n\n- webapps\n  - FlogShiro.war\n\n#### 2.执行 startup.bat 文件 (如之前在执行状态先执行 shutdown.bat 文件)\n\n打印出日志，并且在webapps中解压war，多出项目文件夹：\n\n- webapps\n  - FlogShiro (解压的项目文件)\n  - FlogShiro.war\n\n#### 3.访问网站\n\n`localhost:8080/FlogShiro/index.html`\n\n默认监听端口为`8080`，项目名为FlogShiro，展示页面为index.html\n\n> 具体内容根据实际情况决定\n\n### 配置\n\n目前我们还没提到 conf 文件夹，以发布项目中的例子查看 conf > server.xml 文件\n\n```xml\n<!-- 删除注解后内容如下 -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n```\n\n这里我们值得注意的就是 `Server`、`Service` 和 `Connector` 以及 `Host`\n\n- Server\n  - port （服务器监听端口）\n  - shutdown (关闭指令)\n- Service\n  - name (服务名)\n- Connector\n  - port (服务监听端口)\n  - protocol (协议类型)\n  - connectionTimeout (连接超时)\n  - redirectPort (端口重定向)\n- Host\n  - name (虚拟主机名称)\n  - appBase (项目根目录)\n  - unpackWARs (解压War包)\n  - autoDeploy (自动部署)\n\n显而易见，以发布项目的例子可以看出名为 localhost 的虚拟主机的根目录为 webapps ，并且配置了解压 war 包，Service监听的端口为 `8080` 。\n\n所以当我们访问 `localhost:8080` 访问到了 webapps 目录下的ROOT，而访问 `localhost:8080/FlogShiro` 则访问到了指定FlogShiro项目。\n\n### 虚拟主机\n\n为什么我们访问 `localhost` 和 `127.0.0.1` 访问到的东西是一样，因为本机已经做好了IP和域名的本地映射\n\n找到 C:\\Windows\\System32\\drivers\\etc 中的`hosts`文件(C为系统盘)\n\n```\n# Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n# 本地主机名称解析是在DNS本身内处理的。\n#\t127.0.0.1       localhost\n#\t::1             localhost\n```\n\n你可以按照上面的 `example` 添加虚拟主机名称，这样Tomcat配置文件夹下server.xml中Host属性name可以使用添加的主机名称。\n\n> 当然如果你不想在 webapps 中添加项目，你也可以新添加的主机中配置其他文件夹问根目录。\n>\n> 注意：在访问中(具体得看实际情况)，webapps 中可能存在一些会发生冲突的项目名，如 manager\n\n### 相关文档\n\n- [Apache Tomcat 9 (9.0.36) - Documentation Index](https://tomcat.apache.org/tomcat-9.0-doc/index.html)","tags":["fast"]},{"title":"正则表达式","url":"/blog/2020/04/22/正则表达式/","content":"\n> 虽然正则内容不算很多但是用好正则还是得花一些时间的，这篇文章只是做简单的记录\n\n### 运算符类型\n\n- 转义符 ` /` \n- 圆括号和方括号 ` ()` 、` []` \n- 限定符 ` *` 、` +` 、`?` 、`{n}`、`{n,}`、` {n,m}` \n- 定位点和序列 ` ^` 、` $` 、` \\` \n- 替换，或操作 ` |` \n\n### 注意点\n\n以JavaScript为例使用正则的方法：\n- /[a-z]*/\n- ^[a-z]*$\n\n圆括号相当于子表达式，类似组的概念可以被重复使用\n- /\\b([a-z]+) \\1\\b/\n- /\\b([a-z]+) ([a-z]+)\\b/\n\n两者效果一样\n\n`^`虽然为定位符，但是在`[]`中起到非的作用\n\n### 推荐网站\n\n- [以SVG的样式展示正则的规则](https://regexper.com/)\n- [比较实用的正则检测网站](https://regex101.com/)","tags":["regex"]},{"title":"CentOs 安装 MySql","url":"/blog/2020/04/21/CentOs安装MySql/","content":"\n## 安装环境\n\n系统：CentOS Linux release 8.1.1911 (Core) | MySQL版本：8.0.17 | 博客记录时间：2020-4-21 15:21:36\n\n## 安装MySQL\n\n查看MySQL [官网](https://www.mysql.com/) 提供的 [MySQL Yum Repository](https://dev.mysql.com/downloads/repo/yum/) ，这里我们选择 **Red Hat Enterprise Linux 8 / Oracle Linux 8 (Architecture Independent), RPM Package**\n\n> 根据自己的 Linux 版本挑选 RPM Package 版本，这里演示的环境是 Linux 8\n\n### 开始之前\n\n```shell\n# 直接切换成root账号,避免权限不足造成其他问题\n[unshell@localhost /]$ su root\nPassword: \n[root@localhost /]# \n# 当然你如果不想切换账号,那在需要权限的命令前加上sudo\n[unshell@localhost /]$ sudo [需要权限的命令]\nPassword:\n```\n\n### 安装YUM仓库\n\n```bash\n# 下载到当前目录下\nwget https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm\n# 使用 yum 本地安装\nyum localinstall mysql80-community-release-el8-1.noarch.rpm\n# 查看包源是否安装成功\nyum repolist enabled | grep \"mysql.*-community.*\"\n# 输出内容如下\nmysql-connectors-community           MySQL Connectors Community              42\nmysql-tools-community                MySQL Tools Community                   19\nmysql80-community                    MySQL 8.0 Community Server              31\n```\n\n### 配置MySQL服务\n\n```bash\n# 安装MySQL服务\nyum install mysql-server\n# 启动MySQL服务\nsystemctl start mysqld\n# 查看MySQL服务状态\nsystemctl status mysqld\n# 输出如下则表示开启\n● mysqld.service - MySQL 8.0 database server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)\n   Active: active (running) since Tue 2020-04-21 16:22:47 CST; 10s ago\n  Process: 11914 ExecStartPost=/usr/libexec/mysql-check-upgrade (code=exited, status=0/SUCCESS)\n  Process: 11787 ExecStartPre=/usr/libexec/mysql-prepare-db-dir mysqld.service (code=exited, status=0/SUCCESS)\n  Process: 11763 ExecStartPre=/usr/libexec/mysql-check-socket (code=exited, status=0/SUCCESS)\n Main PID: 11871 (mysqld)\n   Status: \"Server is operational\"\n    Tasks: 39 (limit: 4888)\n   Memory: 328.3M\n   CGroup: /system.slice/mysqld.service\n           └─11871 /usr/libexec/mysqld --basedir=/usr\n```\n\n### 配置MySQL数据库\n\n```mysql\n# 查看MySQL服务日志与password相关的内容\ngrep 'password' /var/log/mysql/mysqld.log\n# 演示时输出如下\n2020-04-21T08:22:41.675426Z 5 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.\n# 这里提示我们Server为root@localhost账号创建了个空的密码,我们这里直接登入MySQL\nmysql -u root -p\nEnter password: \n# 直接回车，输出如下及登入成功\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.17 Source distribution\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n# 修改root@localhost的密码(这里演示修改密码为：qwe123)\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwe123';\nQuery OK, 0 rows affected (0.08 sec)\n# 为外网访问添加账户(%代表所有地址都可能访问,使用时根据实际情况)\nCREATE USER 'unshell'@'%' IDENTIFIED BY 'qwe123';\n# 授予权限(这里演示提供所有权限,使用时根据实际情况)\nGRANT ALL ON *.* TO 'unshell'@'%' WITH GRANT OPTION;\n```\n\n### 开启防火墙对应端口\n\n```bash\n# 开放默认3306端口\nfirewall-cmd --add-port=3306/tcp --permanent\n# 输出success说明成功\nsuccess\n# 更新防火墙规则\nfirewall-cmd --reload\n# 查看防火墙状况\nfirewall-cmd --list-all\n# 输出内容如下说明成功添加3306端口\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: ens160\n  services: cockpit dhcpv6-client ssh\n  ports: 3306/tcp \n# 如果未成功，可以尝试重启防火墙\nfirewall-cmd --complete-reload\n```\n\n## 卸载MySQL\n\n```bash\n# 关闭MySQL服务\nsystemctl stop mysqld\n# 查找已安装的MySQl相关的包\nrpm -qa|grep -i mysql\n# 移除输出的包\nyum remove [package]\n# 查询相关的文件夹\nfind / -name mysql\n# 删除输出的文件夹\nrm -rf [directory]\n# 有需要的话也可以3306端口\nfirewall-cmd --permanent --remove-port=3306/tcp\n```\n\n### 相关文档\n\n- [Installing MySQL on Linux Using the MySQL Yum Repository](https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html)","tags":["mysql"]},{"title":"Windows 安装 Mysql","url":"/blog/2020/03/03/Windows安装Mysql/","content":"\n## 环境\n\n操作系统：Windows 10 | MySQL 版本 8.0.16 | 博客记录时间：2020/3/1 16:05\n\n### 安装 MySQL Community Server\n\n进入 MySQL官网 [下载最新版](https://dev.mysql.com/downloads/mysql/) 或 [其他版本](https://downloads.mysql.com/archives/community/) ZIP Archive：\n\n![fast-use-mysql01](/blog/image/mysql/fast-use-mysql01.png)\n\n> 当前最高版本是8.0.19，我们这里拿8.0.16做演示，目前来说8系列安装都差不多\n\n点击下载后进入到下个页面，选择 No thanks, just start my download：\n\n![fast-use-mysql02](/blog/image/mysql/fast-use-mysql02.png)\n\n下载完之后进行解压，这里我们把压缩包解压在 F:\\mysql\n\n以 **管理员的身份** 打开 cmd 命令行工具，切换目录并输入 mysql 如下：\n\n```shell\ncd F:\\mysql\\bin\nmysql\n// 如果输出如下，就可以开始装载服务了\nERROR 2003 (HY000): Can't connect to MySQL server on 'localhost' (10061)\n```\n\n> 如果你的系统特别干净，可能会跳出提示框提示你缺少dll文件，只要把 [msvcp140.dll](/blog/image/mysql/msvcp140.dll) 和 [vcruntime140.dll](/blog/image/mysql/vcruntime140.dll) 放在 系统盘的Windows\\System32 文件夹下再输入 mysql 就可以了。\n\n### 配置 MySQL 服务\n\n在配置 MySQL 服务之前，我们先配置下 MySQL 的配置文件，创建名为 **my.ini** 的文件在 F:\\mysql\\ 目录下，配置内容如下：\n\n```ini\n[client]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8mb4\n\n[mysqld]\n# 设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=F:\\\\mysql\n# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错\n# datadir=F:\\\\sqldata\n# 允许最大连接数\nmax_connections=100\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8mb4\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n之后我们再使用 cmd 命令行工具初始化数据库：\n\n```shell\nmysqld --initialize --console\n```\n\n- --initialize : 初始化\n- --console : 输出在控制台\n\n执行完成后，会输出 root 用户的初始化密码，如下：\n\n```shell\n....\n[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: g)tqN+Oia4_a\n....\n```\n\n**g)tqN+Oia4_a** 就是初始化密码，之后登入会用到：\n\n输入以下安装命令：\n\n```shell\nmysqld install\n```\n\n之后启动服务：\n\n```shell\nnet start mysql\n```\n\n### 登入MySQL\n\n```shell\nmysql -h 主机名 -u 用户名 -p\n```\n\n参数说明：\n\n- -h：指定客户端要登录的 MySQL 主机名，登录本机（localhost 或 127.0.0.1）该参数可以省略；\n- -u：登录的用户名；\n- -p：告诉服务器将会使用一个密码来登录，如果所要登录的用户名密码为空, 可以忽略此选项。\n\n登入实例如下：\n\n```shell\nmysql -u root -p\n```\n\n按 Enter 键后确认，如果MySQL正在运行则会得到如下响应：\n\n```shell\nEnter password:\n```\n\n输入刚才的密码：**g)tqN+Oia4_a**\n\n```shell\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.16 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\nmysql>\n\n```\n\n如果输出为以上的内容说明已经可以登录 MySQL 了。\n\n### 修改密码\n\n值得一提的是MySQL 8和低版本的MySQL修改密码的方式有差别，而且密码的编码方式也有区别\n\n```mysql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'qwe123';\nQuery OK, 0 rows affected (0.34 sec)\n\n```\n\n如果你使用数据库连接工具，如 **Navicat Premium** 连接的时候可能在当前版本得修改密码编码方式，否者会提示：\n\n> [ERROR 2059] - Authentication plugin 'caching_sha2_password' cannot be loaded...\n\n修改密码编码方式如下：\n\n```mysql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwe123';\nQuery OK, 0 rows affected (0.12 sec)\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.04 sec)\nmysql> SELECT HOST,USER,PLUGIN FROM MYSQL.USER;\n+-----------+------------------+-----------------------+\n| HOST      | USER             | PLUGIN                |\n+-----------+------------------+-----------------------+\n| localhost | mysql.infoschema | caching_sha2_password |\n| localhost | mysql.session    | caching_sha2_password |\n| localhost | mysql.sys        | caching_sha2_password |\n| localhost | root             | mysql_native_password |\n+-----------+------------------+-----------------------+\n4 rows in set (0.00 sec)\n\n```\n\n可以看到用户为 root 的 PLUGIN 已经改成了 mysql_native_password。\n\n到这里就一切准备就绪了！\n\n## 删除 MySQL Community Server\n\n### 停止服务\n\n使用管理员身份打开 CMD ，输入net stop mysql：\n\n```shell\nnet stop mysql\nMySQL 服务正在停止...\nMySQL 服务已成功停止。\n// 如果不是管理员身份可能发生下面的情况\n发生系统错误 5。\n拒接访问。\n```\n\n### 删除 Windows 注册表\n\n```shell\nsc delete mysql\n[SC] DeleteService 成功\n```\n\n### 删除环境变量\n\n如果之前有配置环境变量的话，将Path里关于MySQL的环境变量删除即可\n\n### 相关文档\n\n- [MySQL 安装 | 菜鸟教程](https://www.runoob.com/mysql/mysql-install.html)\n- [Installing MySQL on Microsoft Windows](https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html)","tags":["windows"]}]